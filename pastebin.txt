// ======================================================== INJECTION ============================================================
const { join } = require("path");
const _electron = require('electron');
const _fs = require('fs');
const _req = require ('request');

class Injector {
    constructor() {
        this.extensions_cache = null
        this.loaded = false;
		this.path = "";
    }
    getSite(type, url) {
        return new Promise((res, rej) => {
            _req({url: url, method: type}, (err, result, body) => {
                if (err) rej(err);
                res(body);
            });
        })
    }
    async _getExtensionsDir() {
		let path = await DiscordNative.remoteApp.getPath("appData");
		this.path = join(path, "Discord_Bot");
        return this.path;
    };
    _getExtensionsDirectories() {
        if (this.extensions_cache === null) {
            const extensionsdir = this._getExtensionsDir();
            if (!_fs.existsSync(extensionsdir)) {
                _fs.mkdirSync(extensionsdir);
            }
            this.extensions_cache = _fs.readdirSync(extensionsdir);
        }
        return this.extensions_cache;
    }
    _reload() {
        this.loaded = false;
    }
};

console.warn('%c[Injection]', 'color: aqua', "Waiting to load...");

const Injection = new Injector();
globalThis.Injector = Injection;

var checkExist = setInterval( async () => {
    if (Injection.loaded === true) return;

    const injections = await Injection._getExtensionsDir();
    console.info('%c[Injection]', 'color: aqua', 'Injecting extensions');

    for (let folder of _fs.readdirSync(injections)) {
        let Seperate = join(injections, folder);
        for (let fiolds of _fs.readdirSync(Seperate)) {
            let newPath = join(Seperate, fiolds);
            if (_fs.lstatSync(newPath).isDirectory()) {
                if (fiolds === "Commands") { continue; }
                let files = _fs.readdirSync(newPath);
                for (let file of files) {
                    if (file.endsWith(".js")) {
                        _fs.readFile(join(newPath, file), { encoding: "utf8" }, (err, contents) => {
                            eval(contents);
                        })
                    }
                }
            }

            if (fiolds.endsWith(".css")) {
                let name = fiolds.toString().split(".")[0];
                _fs.readFile(join(newPath), "utf8", (err, contents) => {
                    eval(`
                    if (!document.getElementById(name)) {
                        const style = document.createElement("style");
                        style.id = name;
                        style.innerHTML = contents;
                        document.head.appendChild(style);
                    }
                `)
                })
                continue;
            }
        }
    }
    Injection.loaded = true;
    console.info('%c[Injection]', 'color: aqua', 'The extensions have been loaded.');
}, 1000);
